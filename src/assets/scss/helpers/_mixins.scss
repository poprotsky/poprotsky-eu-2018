@mixin transition($property: all, $duration: .3s, $timing-function: ease-out, $delay: 0s) {
	transition: $property $duration $timing-function $delay;
}

@mixin transform($transforms) {
	transform: $transforms;
}

@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
 
@mixin scale($scale) {
	@include transform(scale($scale));
} 

@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}

@mixin hover($self: false) {
    @if $self {
    	@include min-screen($lg-min) {
	        &,
	        &:hover {
	            @content;
	        }
    	}
    } @else {
    	@include min-screen($lg-min) {
	        &:hover {
	            @content;
	        }
        }
    }
}

@mixin keyframes($name) {
    @keyframes #{$name} {
        @content;
    }
}

@mixin push--auto {
    margin: { 
        left: auto;
        right: auto;
    }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
	display: $display;
    position: $pos;
}

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
	
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
	
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

@mixin input-placeholder {
	&::-webkit-input-placeholder {
		@content;
	}

	&:-moz-placeholder {
		@content;
	}

	&::-moz-placeholder {
		@content;
	}

	&:-ms-input-placeholder {
		@content;
	}
}

@mixin truncate($truncation-boundary: none) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin pos-abs ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}